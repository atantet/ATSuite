#ifndef ATGRAPH_ALGLIB_HPP
#define ATGRAPH_ALGLIB_HPP

#include <cstdio>
#include <cstdlib>
#include <stack>
#include <vector>
#include <iostream>
#include <igraph/igraph.h>
#include "linalg.h"

using namespace std;
using namespace alglib;

typedef sparsematrix spAlg;

spAlg * pajek2HashTable(FILE *f){
char label[20];
  int N, E;
  int i, j, i0;
  double x;
  spAlg *hashTable = new spAlg;

  // Read vertices
  fscanf(f, "%s %d", label, &N);

  // Read first (assume monotonous)
  fscanf(f, "%d %s", &i0, label);
  for (int k = 1; k < N; k++){
    fscanf(f, "%d %s", &i, label);
  }

  // Read Edges
  fscanf(f, "%s %d", label, &E);

  // Create Hash Table
  sparsecreate(N, N, E, *hashTable);

  for (int k = 0; k < E; k++){
    fscanf(f, "%d %d %lf", &i, &j, &x);
    sparseset(*hashTable, i, j, x);
  }
  
  return hashTable;
}


spAlg * igraph2HashTable(igraph_t *srcGraph)
{
  igraph_integer_t N, E;
  igraph_vector_t edges, weights;
  spAlg *hashTable = new spAlg;

  // Get edge list and weights
  N = igraph_vcount(srcGraph);
  E = igraph_ecount(srcGraph);
  igraph_vector_init(&edges, E * 2);
  igraph_vector_init(&weights, E);
  igraph_get_edgelist(srcGraph, &edges, true);
  if ((bool) igraph_cattribute_has_attr(srcGraph, IGRAPH_ATTRIBUTE_EDGE, "weight"))
    EANV(srcGraph, "weight", &weights);
  else
    igraph_vector_fill(&weights, 1.);

  // Create Hash Table
  sparsecreate(N, N, E, *hashTable);

  // Get triplet list from igraph graph
  for (int k = 0; k < E; k++)
    sparseset(*hashTable, VECTOR(edges)[k], VECTOR(edges)[E+k], VECTOR(weights)[k]);

return hashTable;
}

void setConstant(real_1d_array *v, double constant)
{
int ncols = v->length();
for (int i = 0; i < ncols; i++)
    (*v)(i) = constant;
  
  return;
}

void setLinSpaced(int length, int low, int high){


#endif
